{"name":"Yii-audit-module","tagline":"Track and display usage information including page requests, database field changes, php errors and yii logs.","body":"# Yii Audit Module\r\n\r\nTrack and display usage information including page requests, database field changes, php errors and yii logs.\r\n\r\n\r\n## Features\r\n\r\n\r\n### Visitor Request Tracking\r\n\r\n- Track site activity including everything you need to know about the request.\r\n- The error handler will automatically create an AuditRequest record for each visitor hit.\r\n- When the application ends it will update the AuditRequest with memory and time information.\r\n\r\nTracks the following information:\r\n\r\n- Links - Requested URL, referring URL, redirecting to URL (read from the headers at the end of the application)\r\n- User - Visitors IP Address and logged in user's ID\r\n- Superglobals - (`$_GET`/`$_POST`/`$_SESSION`/`$_FILES`/`$_COOKIE`), the arrays are serialized then compressed using gzip\r\n- Timers - Start and end times of the application\r\n- Memory - Memory usage and peak memory usage\r\n\r\n\r\n### Model Field Tracking\r\n\r\n- Tracks the old and new values each time your model is saved.\r\n- Behavior can easily be attached to any model you want to track field changes.\r\n- Each field change is related to an AuditRequest so you can see the entire state of the visitors action.\r\n- Performs multiple inserts in a single query with `CDbCommandBuilder::createMultipleInsertCommand()`.\r\n- Provides views that can be rendered into your application to show changed fields for your model.\r\n\r\n\r\n### Error Tracking\r\n\r\n- Full error stack dump is saved, even in live mode.\r\n- Catches all errors, including fatal errors.\r\n- View all the collected data from the module interface.\r\n- Each error is related to an AuditRequest so you can see the entire state of the visitors action.\r\n\r\n\r\n### Log Tracking\r\n\r\n- Save logs to your database for easy real-time debugging or for checking on historical logs.\r\n- Each log is related to an AuditRequest so you can see the entire state of the visitors action.\r\n\r\n\r\n## Screenshots\r\n\r\nYii Audit Module Homepage:\r\n![home](https://raw.github.com/cornernote/yii-audit-module/master/screenshot/home.png)\r\n\r\nRequest List\r\n![Requests](https://raw.github.com/cornernote/yii-audit-module/master/screenshot/requests.png)\r\n\r\nRequest View\r\n![Request](https://raw.github.com/cornernote/yii-audit-module/master/screenshot/request.png)\r\n\r\nField List\r\n![Fields](https://raw.github.com/cornernote/yii-audit-module/master/screenshot/fields.png)\r\n\r\nField View\r\n![Field](https://raw.github.com/cornernote/yii-audit-module/master/screenshot/field.png)\r\n\r\nError List\r\n![Errors](https://raw.github.com/cornernote/yii-audit-module/master/screenshot/errors.png)\r\n\r\nError View\r\n![Error](https://raw.github.com/cornernote/yii-audit-module/master/screenshot/error.png)\r\n\r\nLog List\r\n![Logs](https://raw.github.com/cornernote/yii-audit-module/master/screenshot/logs.png)\r\n\r\nLog View\r\n![Log](https://raw.github.com/cornernote/yii-audit-module/master/screenshot/log.png)\r\n\r\n\r\n## Installation\r\n\r\nPlease download using ONE of the following methods:\r\n\r\n\r\n### Composer Installation\r\n\r\nAll requirements are automatically downloaded into the correct location when using composer.  There is no need to download additional files or set paths to third party files.\r\n\r\nGet composer:\r\n\r\n```\r\ncurl http://getcomposer.org/installer | php\r\n```\r\n\r\nInstall latest release OR development version:\r\n\r\n```\r\nphp composer.phar require cornernote/yii-audit-module:*\t\t\t\t// latest release\r\nphp composer.phar require cornernote/yii-audit-module:dev-master\t// development version\r\n```\r\n\r\nAdd the `vendor` folder to the `aliases` in your yii configuration:\r\n\r\n```php\r\nreturn array(\r\n\t'aliases' => array(\r\n\t\t'vendor' => '/path/to/vendor',\r\n\t),\r\n);\r\n```\r\n\r\n\r\n### Manual Installation\r\n\r\nDownload the [latest release](https://github.com/cornernote/yii-audit-module/releases/latest) or [development version](https://github.com/cornernote/yii-audit-module/archive/master.zip) and move the `audit` folder into your `protected/modules` folder.\r\n\r\nIn addition the following are required:\r\n* [YiiStrap](http://www.getyiistrap.com) for the interface elements.  Please follow their Getting Started guide to setup the aliases and components for your application.\r\n\r\n\r\n## Configuration\r\n\r\nAdd yii-audit-module to the `modules` in your yii configuration:\r\n\r\n```php\r\nreturn array(\r\n\t'modules' => array(\r\n\t\t'audit' => array(\r\n\t\t\t// path to the AuditModule class\r\n\t\t\t'class' => '/path/to/vendor/cornernote/yii-audit-module/audit/AuditModule',\r\n\r\n\t\t\t// set this to your user view url,\r\n\t\t\t// AuditModule will replace --user_id-- with the actual user_id\r\n\t\t\t'userViewUrl' => array('/user/view', 'id' => '--user_id--'),\r\n\r\n\t\t\t// Set to false if you do not wish to track database audits.\r\n\t\t\t'enableAuditField' => true,\r\n\r\n\t\t\t// The ID of the CDbConnection application component. If not set, a SQLite3\r\n\t\t\t// database will be automatically created in protected/runtime/audit-AuditVersion.db.\r\n\t\t\t'connectionID' => 'db',\r\n\r\n\t\t\t// Whether the DB tables should be created automatically if they do not exist. Defaults to true.\r\n\t\t\t// If you already have the table created, it is recommended you set this property to be false to improve performance.\r\n\t\t\t'autoCreateTables' => true,\r\n\r\n\t\t\t// The layout used for module controllers.\r\n\t\t\t'layout' => 'audit.views.layouts.column1',\r\n\r\n\t\t\t// Defines the access filters for the module.\r\n\t\t\t// The default is AuditAccessFilter which will allow any user listed in AuditModule::adminUsers to have access.\r\n\t\t\t'controllerFilters' => array(\r\n\t\t\t\t'auditAccess' => array('audit.components.AuditAccessFilter'),\r\n\t\t\t),\r\n\r\n\t\t\t// A list of users who can access this module.\r\n\t\t\t'adminUsers' => array('admin'),\r\n\r\n\t\t\t// The path to YiiStrap.\r\n\t\t\t// Only required if you do not want YiiStrap in your app config, for example, if you are running YiiBooster.\r\n\t\t\t// Only required if you did not install using composer.\r\n\t\t\t'yiiStrapPath' => '/path/to/vendor/crisu83/yiistrap',\r\n\t\t),\r\n\t),\r\n);\r\n```\r\n\r\nUse `AuditErrorHandler` as your applications error handler by updating the `components` section in your yii configuration:\r\n\r\n```php\r\nreturn array(\r\n\t'components' => array(\r\n\t\t'errorHandler' => array(\r\n\t\t\t// path to the AuditErrorHandler class\r\n\t\t\t'class' => 'audit.components.AuditErrorHandler',\r\n\r\n\t\t\t// set this as you normally would for CErrorHandler\r\n\t\t\t'errorAction' => 'site/error',\r\n\r\n\t\t\t// Set to false to only track error requests.  Defaults to true.\r\n\t\t\t'trackAllRequests' => true,\r\n\r\n\t\t\t// Set to false to not handle fatal errors.  Defaults to true.\r\n\t\t\t'catchFatalErrors' => true,\r\n\r\n\t\t\t// Request keys that we do not want to save in the tracking data.\r\n\t\t\t'auditRequestIgnoreKeys' => array('PHP_AUTH_PW', 'password'),\r\n\r\n\t\t),\r\n\t),\r\n);\r\n```\r\n\r\nTo handle fatal errors we have add the error handler to the `preload` section in your yii configuration:\r\n\r\n```php\r\nreturn array(\r\n\t'preload' => array(\r\n\t\t'log', \r\n\t\t'errorHandler', // handle fatal errors\r\n\t),\r\n);\r\n```\r\n\r\nTo track logs we need to add a logroute to `AuditLogRoute` to your yii configuration:\r\n```php\r\nreturn array(\r\n\t'components' => array(\r\n\t\t'db' => array(\r\n\t\t\t// standard setup\r\n\t\t\t'connectionString' => 'mysql:host=localhost;dbname=test',\r\n\t\t\t'username' => 'root',\r\n\t\t\t'password' => '',\r\n\r\n\t\t\t// set to true to enable database query logging\r\n\t\t\t// don't forget to put `profile` in the log route `levels` below\r\n\t\t\t'enableProfiling' => true,\r\n\r\n\t\t\t// set to true to replace the params with the literal values\r\n\t\t\t'enableParamLogging' => true,\r\n\t\t),\r\n\t\t'log' => array(\r\n\t\t\t'class' => 'CLogRouter',\r\n\t\t\t'routes' => array(\r\n\t\t\t\t// add a new log route\r\n\t\t\t\tarray(\r\n\t\t\t\t\t// path to the AuditLogRoute class\r\n\t\t\t\t\t'class' => 'audit.components.AuditLogRoute',\r\n\r\n\t\t\t\t\t// can be: trace, warning, error, info, profile\r\n\t\t\t\t\t// can also be anything else you want to pass as a level to `Yii::log()`\r\n\t\t\t\t\t'levels' => 'error, warning, profile, audit',\r\n\t\t\t\t),\r\n\t\t\t),\r\n\t\t),\r\n\t),\r\n);\r\n```\r\n\r\nTo track field changes add `AuditFieldBehavior` to your CActiveRecord `behaviors()` functions.\r\n\r\n```php\r\nclass Post extends CActiveRecord\r\n{\r\n\tpublic function behaviors()\r\n\t{\r\n\t\treturn array(\r\n\t\t\t'AuditFieldBehavior' => array(\r\n\t\t\t\t// Path to AuditFieldBehavior class.\r\n\t\t\t\t'class' => 'audit.components.AuditFieldBehavior',\r\n\r\n\t\t\t\t// Set to false if you just want to use getDbAttribute and other methods in this class.\r\n\t\t\t\t// If left unset the value will come from AuditModule::enableAuditField\r\n\t\t\t\t'enableAuditField' => null,\r\n\r\n\t\t\t\t// Any additional models you want to use to write model and model_id audits to.  If this array is not empty then\r\n\t\t\t\t// each field modifed will result in an AuditField being created for each additionalAuditModels.\r\n\t\t\t\t'additionalAuditModels' => array(\r\n\t\t\t\t\t'Post' => 'post_id',\r\n\t\t\t\t),\r\n\r\n\t\t\t\t// A list of values that will be treated as if they were null.\r\n\t\t\t\t'ignoreValues' => array('0', '0.0', '0.00', '0.000', '0.0000', '0.00000', '0.000000', '0000-00-00', '0000-00-00 00:00:00'),\r\n\t\t\t),\r\n\t\t);\r\n\t}\r\n}\r\n```\r\n\r\n\r\n## Usage\r\n\r\nLogging is as simple as calling `Yii::log()`.  The second argument needs to be one of the `AuditLogRoute::levels` you specified above (error, warning or audit).\r\n```php\r\nYii::log('Hello World!', 'audit');\r\nYii::log('something really bad just happened', 'error');\r\n```\r\n\r\nThere are several partial views that you can render into your application.  These are all optional.\r\n\r\nAdd information to your footer:\r\n```php\r\n$this->renderPartial('audit.views.request.__footer');\r\n```\r\n\r\nShow changes for a model:\r\n```php\r\n$post = Post::model()->findByPk(123);\r\n$this->renderPartial('audit.views.field.__fields', array('model' => $post));\r\n// or by using the model_name and model_id\r\n// $this->renderPartial('audit.views.field.__fields', array('model_name' => 'Post', 'model_id' => 123));\r\n```\r\n\r\nShow changes for a single field in a model:\r\n```php\r\n$post = Post::model()->findByPk(123);\r\n$this->renderPartial('audit.views.field.__field', array('model' => $post, 'field' => 'status'));\r\n// or by using the model_name and model_id\r\n// $this->renderPartial('audit.views.field.__field', array('model_name' => 'Post', 'model_id' => 123, 'field' => 'status'));\r\n```\r\n","google":"UA-46879709-4","note":"Don't delete this file! It's used internally to help with page regeneration."}